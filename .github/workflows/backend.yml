name: Build

on:
  push:
    branches:
      - main
  pull_request:  
    types: [opened, synchronize, reopened] 

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: 17
          distribution: 'adopt'
      - name: Install .NET SDK
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '6.0.x'  # Replace with the desired .NET SDK version
      - name: Create analysis directory
        run: mkdir analysis
      - name: Copy project files to analysis directory
        run: |
          cp -R ./sourcecode/BackEnd ./analysis
      - name: Analyze with SonarScanner for MSBuild
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        working-directory: ./analysis
        run: |
          dotnet tool install --global dotnet-sonarscanner
          dotnet sonarscanner begin /k:"BackEnd" /d:sonar.host.url="${{ secrets.SONAR_HOST_URL }}" /d:sonar.login="${{ secrets.SONAR_TOKEN_BACKEND }}"
          for project in $(find . -name '*.csproj'); do
            dotnet build "$project"
          done
          dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN_BACKEND }}"

  pull-request-analysis:
    needs: build
    name: Pull Request Analysis
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        run: git fetch --unshallow
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: 17
          distribution: 'adopt'
      - name: Install .NET SDK
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '6.0.x'  # Replace with the desired .NET SDK version
      - name: Create analysis directory
        run: mkdir analysis
      - name: Copy project files to analysis directory
        run: |
          cp -R ./sourcecode/BackEnd ./analysis
      - name: Analyze with SonarScanner for MSBuild
        working-directory: ./analysis
        run: |
          dotnet tool install --global dotnet-sonarscanner
          dotnet sonarscanner begin /k:"BackEnd" /d:sonar.host.url="${{ secrets.SONAR_HOST_URL }}" /d:sonar.login="${{ secrets.SONAR_TOKEN_BACKEND }}"
          for project in $(find . -name '*.csproj'); do
            dotnet build "$project"
          done
          dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN_BACKEND }}"
